{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { BookularService } from './bookular.service';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpTestingController } from '@angular/common/http/testing';\n/*describe('BookularService', () => {\r\n  let service: BookularService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n    service = TestBed.inject(BookularService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n});*/\ndescribe('BookularService', () => {\n  let service;\n  let httpClient;\n  let httpTestingController;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      /*      imports: [HttpClientTestingModule]*/\n    });\n    httpClient = TestBed.inject(HttpClient);\n    httpTestingController = TestBed.inject(HttpTestingController);\n    service = TestBed.inject(BookularService);\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  /* it('should be created', () => {\r\n     expect(service).toBeTruthy();\r\n   });\r\n  \n   */ /*  it('should use ValueService', () => {\r\n      service = TestBed.inject(new BookularService(new HttpClient));\r\n      expect(service.getBooks(\"test\")).toBe();\r\n      });*/ /*\r\n            it('should return expected heroes (HttpClient called once)', (done: DoneFn) => {\r\n            const expectedHeroes: IBook[] =\r\n            [{\r\n            id: 1,\r\n            title: \"test boek\",\r\n            description: \"test boeken beschrijving\",\r\n            author: {\r\n            id: 1,\r\n            firstName: \"Kees\",\r\n            lastName: \"Test\",\r\n            bio: \"\",\r\n            books: null\r\n            },\r\n            authorId: 1\r\n            },\r\n            {\r\n            id: 2,\r\n            title: \"test boek\",\r\n            description: \"test boeken beschrijving\",\r\n            author: {\r\n            id: 2,\r\n            firstName: \"Kees\",\r\n            lastName: \"Test\",\r\n            bio: \"\",\r\n            books: null\r\n            },\r\n            authorId: 2\r\n            },\r\n            ];\r\n            httpClientSpy.get.and.returnValue(asyncData(expectedHeroes));\r\n            service.books$.subscribe({\r\n            next: heroes => {\r\n            expect(heroes)\r\n            .withContext('expected heroes')\r\n            .toEqual(expectedHeroes);\r\n            done();\r\n            },\r\n            error: done.fail\r\n            });\r\n            expect(httpClientSpy.get.calls.count())\r\n            .withContext('one call')\r\n            .toBe(1);*/\n  /* });*/\n});\n/*function asyncData(expectedHeroes: IBook[]): import(\"rxjs\").Observable<unknown> {\r\n  throw new Error('Function not implemented.');\r\n}*/","map":{"version":3,"mappings":"AAAA,SAASA,OAAO,QAAQ,uBAAuB;AAE/C,SAASC,eAAe,QAAQ,oBAAoB;AACpD,SAASC,UAAU,QAAQ,sBAAsB;AAEjD,SAAkCC,qBAAqB,QAAQ,8BAA8B;AAE7F;;;;;;;;;;;;AAaAC,QAAQ,CAAC,iBAAiB,EAAE,MAAK;EAC/B,IAAIC,OAAwB;EAE5B,IAAIC,UAAsB;EAC1B,IAAIC,qBAA4C;EAEhDC,UAAU,CAAC,MAAK;IACdR,OAAO,CAACS,sBAAsB,CAAC;MAC7B;IAAA,CACD,CAAC;IAEFH,UAAU,GAAGN,OAAO,CAACU,MAAM,CAACR,UAAU,CAAC;IACvCK,qBAAqB,GAAGP,OAAO,CAACU,MAAM,CAACP,qBAAqB,CAAC;IAE7DE,OAAO,GAAGL,OAAO,CAACU,MAAM,CAACT,eAAe,CAAC;EAC3C,CAAC,CAAC;EAEFU,EAAE,CAAC,mBAAmB,EAAE,MAAK;IAC3BC,MAAM,CAACP,OAAO,CAAC,CAACQ,UAAU,EAAE;EAC9B,CAAC,CAAC;EAIF;;;;KAAA,CAIG;;;WAAA,CAGI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+CP;AACF,CAAC,CAAC;AAEF","names":["TestBed","BookularService","HttpClient","HttpTestingController","describe","service","httpClient","httpTestingController","beforeEach","configureTestingModule","inject","it","expect","toBeTruthy"],"sourceRoot":"","sources":["C:\\work\\traineeship\\Bookular\\Bookular\\ClientApp\\src\\services\\bookular.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\r\n\r\nimport { BookularService } from './bookular.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { IBook } from '../app/home/IBook';\r\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\n\r\n/*describe('BookularService', () => {\r\n  let service: BookularService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n    service = TestBed.inject(BookularService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n});*/\r\n\r\ndescribe('BookularService', () => {\r\n  let service: BookularService;\r\n\r\n  let httpClient: HttpClient;\r\n  let httpTestingController: HttpTestingController;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      /*      imports: [HttpClientTestingModule]*/\r\n    });\r\n\r\n    httpClient = TestBed.inject(HttpClient);\r\n    httpTestingController = TestBed.inject(HttpTestingController);\r\n\r\n    service = TestBed.inject(BookularService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n\r\n\r\n\r\n  /* it('should be created', () => {\r\n     expect(service).toBeTruthy();\r\n   });\r\n \r\n   *//*  it('should use ValueService', () => {\r\n      service = TestBed.inject(new BookularService(new HttpClient));\r\n      expect(service.getBooks(\"test\")).toBe();\r\n    });*//*\r\n\r\nit('should return expected heroes (HttpClient called once)', (done: DoneFn) => {\r\n  const expectedHeroes: IBook[] =\r\n    [{\r\n      id: 1,\r\n      title: \"test boek\",\r\n      description: \"test boeken beschrijving\",\r\n      author: {\r\n        id: 1,\r\n        firstName: \"Kees\",\r\n        lastName: \"Test\",\r\n        bio: \"\",\r\n        books: null\r\n      },\r\n      authorId: 1\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"test boek\",\r\n      description: \"test boeken beschrijving\",\r\n      author: {\r\n        id: 2,\r\n        firstName: \"Kees\",\r\n        lastName: \"Test\",\r\n        bio: \"\",\r\n        books: null\r\n      },\r\n      authorId: 2\r\n    },\r\n    ];\r\n\r\n  httpClientSpy.get.and.returnValue(asyncData(expectedHeroes));\r\n\r\n  service.books$.subscribe({\r\n    next: heroes => {\r\n      expect(heroes)\r\n        .withContext('expected heroes')\r\n        .toEqual(expectedHeroes);\r\n      done();\r\n    },\r\n    error: done.fail\r\n  });\r\n\r\n  expect(httpClientSpy.get.calls.count())\r\n    .withContext('one call')\r\n    .toBe(1);*/\r\n  /* });*/\r\n});\r\n\r\n/*function asyncData(expectedHeroes: IBook[]): import(\"rxjs\").Observable<unknown> {\r\n  throw new Error('Function not implemented.');\r\n}*/\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}