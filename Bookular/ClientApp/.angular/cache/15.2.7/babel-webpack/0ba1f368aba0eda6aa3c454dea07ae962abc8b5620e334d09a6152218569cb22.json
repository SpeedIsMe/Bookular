{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { BookTableComponent } from './book-table.component';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { HttpClient } from '@angular/common/http';\ndescribe('BookTableComponent', () => {\n  let fixture;\n  /*  let httpTestingController: HttpTestingController;*/\n  let component;\n  let httpClient;\n  let httpTestingController;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      declarations: [BookTableComponent]\n    }).compileComponents();\n    // Inject the http service and test controller for each test\n    httpClient = TestBed.inject(HttpClient);\n    httpTestingController = TestBed.inject(HttpTestingController);\n    fixture = TestBed.createComponent(BookTableComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    // Inject the http service and test controller for each test\n    /*    httpClient = TestBed.get(httpClient);\r\n        fixture = TestBed.createComponent(new BookTableComponent(httpClient));\r\n        component = fixture.componentInstance;\r\n        fixture.detectChanges();*/\n  });\n\n  it('can test HttpClient.get', () => {\n    const testData = {\n      name: 'Test Data'\n    };\n    // Make an HTTP GET request\n    httpClient.get(testUrl).subscribe(data =>\n    // When observable resolves, result should match test data\n    expect(data).toEqual(testData));\n    // The following `expectOne()` will match the request's URL.\n    // If no requests or multiple requests matched that URL\n    // `expectOne()` would throw.\n    const req = httpTestingController.expectOne('/data');\n    // Assert that the request is a GET.\n    expect(req.request.method).toEqual('GET');\n    // Respond with mock data, causing Observable to resolve.\n    // Subscribe callback asserts that correct data was returned.\n    req.flush(testData);\n    // Finally, assert that there are no outstanding requests.\n    httpTestingController.verify();\n  });\n  /* beforeEach(async () => {\r\n     await TestBed.configureTestingModule({\r\n       declarations: [ BookTableComponent ]\r\n     })\r\n     .compileComponents();\r\n  \n     fixture = TestBed.createComponent(BookTableComponent);\r\n     component = fixture.componentInstance;\r\n     fixture.detectChanges();\r\n   });*/\n  /*\r\n    it('should create', () => {\r\n      expect(component).toBeTruthy();\r\n    });*/\n  it('works', () => {});\n});","map":{"version":3,"mappings":"AAAA,SAA2BA,OAAO,QAAQ,uBAAuB;AAEjE,SAASC,kBAAkB,QAAQ,wBAAwB;AAC3D,SAASC,uBAAuB,EAAEC,qBAAqB,QAAQ,8BAA8B;AAC7F,SAASC,UAAU,QAAQ,sBAAsB;AAEjDC,QAAQ,CAAC,oBAAoB,EAAE,MAAK;EAElC,IAAIC,OAA6C;EAGnD;EACE,IAAIC,SAA6B;EAEjC,IAAIC,UAAsB;EAC1B,IAAIC,qBAA4C;EAEhDC,UAAU,CAAC,MAAK;IACdV,OAAO,CAACW,sBAAsB,CAAC;MAC7BC,OAAO,EAAE,CAACV,uBAAuB,CAAC;MAClCW,YAAY,EAAE,CAACZ,kBAAkB;KAClC,CAAC,CAACa,iBAAiB,EAAE;IAEtB;IACAN,UAAU,GAAGR,OAAO,CAACe,MAAM,CAACX,UAAU,CAAC;IACvCK,qBAAqB,GAAGT,OAAO,CAACe,MAAM,CAACZ,qBAAqB,CAAC;IAE7DG,OAAO,GAAGN,OAAO,CAACgB,eAAe,CAACf,kBAAkB,CAAC;IACrDM,SAAS,GAAGD,OAAO,CAACW,iBAAiB;IACrCX,OAAO,CAACY,aAAa,EAAE;IAEvB;IACJ;;;;EAIE,CAAC,CAAC;;EAEFC,EAAE,CAAC,yBAAyB,EAAE,MAAK;IACjC,MAAMC,QAAQ,GAAS;MAAEC,IAAI,EAAE;IAAW,CAAE;IAE5C;IACAb,UAAU,CAACc,GAAG,CAAOC,OAAO,CAAC,CAC1BC,SAAS,CAACC,IAAI;IACb;IACAC,MAAM,CAACD,IAAI,CAAC,CAACE,OAAO,CAACP,QAAQ,CAAC,CAC/B;IAEH;IACA;IACA;IACA,MAAMQ,GAAG,GAAGnB,qBAAqB,CAACoB,SAAS,CAAC,OAAO,CAAC;IAEpD;IACAH,MAAM,CAACE,GAAG,CAACE,OAAO,CAACC,MAAM,CAAC,CAACJ,OAAO,CAAC,KAAK,CAAC;IAEzC;IACA;IACAC,GAAG,CAACI,KAAK,CAACZ,QAAQ,CAAC;IAEnB;IACAX,qBAAqB,CAACwB,MAAM,EAAE;EAChC,CAAC,CAAC;EAEH;;;;;;;;;;EAUD;;;;EAKEd,EAAE,CAAC,OAAO,EAAE,MAAK,CACjB,CAAC,CAAC;AACJ,CAAC,CAAC","names":["TestBed","BookTableComponent","HttpClientTestingModule","HttpTestingController","HttpClient","describe","fixture","component","httpClient","httpTestingController","beforeEach","configureTestingModule","imports","declarations","compileComponents","inject","createComponent","componentInstance","detectChanges","it","testData","name","get","testUrl","subscribe","data","expect","toEqual","req","expectOne","request","method","flush","verify"],"sourceRoot":"","sources":["C:\\work\\traineeship\\Bookular\\Bookular\\ClientApp\\src\\app\\book-table\\book-table.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { BookTableComponent } from './book-table.component';\r\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\ndescribe('BookTableComponent', () => {\r\n \r\n  let fixture: ComponentFixture<BookTableComponent>;\r\n\r\n\r\n/*  let httpTestingController: HttpTestingController;*/\r\n  let component: BookTableComponent;\r\n\r\n  let httpClient: HttpClient;\r\n  let httpTestingController: HttpTestingController;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [HttpClientTestingModule],\r\n      declarations: [BookTableComponent]\r\n    }).compileComponents();\r\n\r\n    // Inject the http service and test controller for each test\r\n    httpClient = TestBed.inject(HttpClient);\r\n    httpTestingController = TestBed.inject(HttpTestingController);\r\n\r\n    fixture = TestBed.createComponent(BookTableComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n\r\n    // Inject the http service and test controller for each test\r\n/*    httpClient = TestBed.get(httpClient);\r\n    fixture = TestBed.createComponent(new BookTableComponent(httpClient));\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();*/\r\n  });\r\n\r\n  it('can test HttpClient.get', () => {\r\n    const testData: Data = { name: 'Test Data' };\r\n\r\n    // Make an HTTP GET request\r\n    httpClient.get<Data>(testUrl)\r\n      .subscribe(data =>\r\n        // When observable resolves, result should match test data\r\n        expect(data).toEqual(testData)\r\n      );\r\n\r\n    // The following `expectOne()` will match the request's URL.\r\n    // If no requests or multiple requests matched that URL\r\n    // `expectOne()` would throw.\r\n    const req = httpTestingController.expectOne('/data');\r\n\r\n    // Assert that the request is a GET.\r\n    expect(req.request.method).toEqual('GET');\r\n\r\n    // Respond with mock data, causing Observable to resolve.\r\n    // Subscribe callback asserts that correct data was returned.\r\n    req.flush(testData);\r\n\r\n    // Finally, assert that there are no outstanding requests.\r\n    httpTestingController.verify();\r\n  });\r\n\r\n /* beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      declarations: [ BookTableComponent ]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(BookTableComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });*/\r\n/*\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });*/\r\n\r\n  it('works', () => {\r\n  });\r\n});\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}