{"ast":null,"code":"import { BookularService } from './bookular.service';\ndescribe('BookularService', () => {\n  let service;\n  let httpClientSpy;\n  beforeEach(() => {\n    /*TestBed.configureTestingModule({});\r\n    service = TestBed.inject(BookularService);*/\n    httpClientSpy = jasmine.createSpyObj('HttpClient', ['get']);\n    service = new BookularService(httpClientSpy);\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  /* it('should be created', () => {\r\n     expect(service).toBeTruthy();\r\n   });\r\n  \n   */ /*  it('should use ValueService', () => {\r\n      service = TestBed.inject(new BookularService(new HttpClient));\r\n      expect(service.getBooks(\"test\")).toBe();\r\n      });*/ /*\r\n            it('should return expected heroes (HttpClient called once)', (done: DoneFn) => {\r\n            const expectedHeroes: IBook[] =\r\n            [{\r\n            id: 1,\r\n            title: \"test boek\",\r\n            description: \"test boeken beschrijving\",\r\n            author: {\r\n            id: 1,\r\n            firstName: \"Kees\",\r\n            lastName: \"Test\",\r\n            bio: \"\",\r\n            books: null\r\n            },\r\n            authorId: 1\r\n            },\r\n            {\r\n            id: 2,\r\n            title: \"test boek\",\r\n            description: \"test boeken beschrijving\",\r\n            author: {\r\n            id: 2,\r\n            firstName: \"Kees\",\r\n            lastName: \"Test\",\r\n            bio: \"\",\r\n            books: null\r\n            },\r\n            authorId: 2\r\n            },\r\n            ];\r\n            httpClientSpy.get.and.returnValue(asyncData(expectedHeroes));\r\n            service.books$.subscribe({\r\n            next: heroes => {\r\n            expect(heroes)\r\n            .withContext('expected heroes')\r\n            .toEqual(expectedHeroes);\r\n            done();\r\n            },\r\n            error: done.fail\r\n            });\r\n            expect(httpClientSpy.get.calls.count())\r\n            .withContext('one call')\r\n            .toBe(1);*/\n  /* });*/\n});\n/*function asyncData(expectedHeroes: IBook[]): import(\"rxjs\").Observable<unknown> {\r\n  throw new Error('Function not implemented.');\r\n}*/","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAQ,oBAAoB;AAIpDC,QAAQ,CAAC,iBAAiB,EAAE,MAAK;EAC/B,IAAIC,OAAwB;EAC5B,IAAIC,aAAyC;EAE7CC,UAAU,CAAC,MAAK;IACd;;IAEAD,aAAa,GAAGE,OAAO,CAACC,YAAY,CAAC,YAAY,EAAE,CAAC,KAAK,CAAC,CAAC;IAC3DJ,OAAO,GAAG,IAAIF,eAAe,CAACG,aAAa,CAAC;EAC9C,CAAC,CAAC;EAIFI,EAAE,CAAC,mBAAmB,EAAE,MAAK;IAC3BC,MAAM,CAACN,OAAO,CAAC,CAACO,UAAU,EAAE;EAC9B,CAAC,CAAC;EAIH;;;;KAAA,CAIG;;;WAAA,CAGK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+CR;AACD,CAAC,CAAC;AAEF","names":["BookularService","describe","service","httpClientSpy","beforeEach","jasmine","createSpyObj","it","expect","toBeTruthy"],"sourceRoot":"","sources":["C:\\work\\traineeship\\Bookular\\Bookular\\ClientApp\\src\\services\\bookular.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\r\n\r\nimport { BookularService } from './bookular.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { IBook } from '../app/home/IBook';\r\n\r\ndescribe('BookularService', () => {\r\n  let service: BookularService;\r\n  let httpClientSpy: jasmine.SpyObj<HttpClient>;\r\n\r\n  beforeEach(() => {\r\n    /*TestBed.configureTestingModule({});\r\n    service = TestBed.inject(BookularService);*/\r\n    httpClientSpy = jasmine.createSpyObj('HttpClient', ['get']);\r\n    service = new BookularService(httpClientSpy);\r\n  });\r\n\r\n\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n\r\n  \r\n\r\n /* it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n\r\n  *//*  it('should use ValueService', () => {\r\n      service = TestBed.inject(new BookularService(new HttpClient));\r\n      expect(service.getBooks(\"test\")).toBe();\r\n    });*//*\r\n\r\n  it('should return expected heroes (HttpClient called once)', (done: DoneFn) => {\r\n    const expectedHeroes: IBook[] =\r\n      [{\r\n        id: 1,\r\n        title: \"test boek\",\r\n        description: \"test boeken beschrijving\",\r\n        author: {\r\n          id: 1,\r\n          firstName: \"Kees\",\r\n          lastName: \"Test\",\r\n          bio: \"\",\r\n          books: null\r\n        },\r\n        authorId: 1\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"test boek\",\r\n        description: \"test boeken beschrijving\",\r\n        author: {\r\n          id: 2,\r\n          firstName: \"Kees\",\r\n          lastName: \"Test\",\r\n          bio: \"\",\r\n          books: null\r\n        },\r\n        authorId: 2\r\n      },\r\n      ];\r\n\r\n    httpClientSpy.get.and.returnValue(asyncData(expectedHeroes));\r\n\r\n    service.books$.subscribe({\r\n      next: heroes => {\r\n        expect(heroes)\r\n          .withContext('expected heroes')\r\n          .toEqual(expectedHeroes);\r\n        done();\r\n      },\r\n      error: done.fail\r\n    });\r\n\r\n    expect(httpClientSpy.get.calls.count())\r\n      .withContext('one call')\r\n      .toBe(1);*/\r\n /* });*/\r\n});\r\n\r\n/*function asyncData(expectedHeroes: IBook[]): import(\"rxjs\").Observable<unknown> {\r\n  throw new Error('Function not implemented.');\r\n}*/\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}