{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { BookularService } from './bookular.service';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n/*describe('BookularService', () => {\r\n  let service: BookularService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n    service = TestBed.inject(BookularService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n});*/\ndescribe('BookularService', () => {\n  let service;\n  let httpClient;\n  let httpTestingController;\n  const expectedBooks = [{\n    id: 1,\n    title: \"test boek\",\n    description: \"test boeken beschrijving\",\n    author: {\n      id: 1,\n      firstName: \"Kees\",\n      lastName: \"Test\",\n      bio: \"Kees Test is bijzonder\",\n      books: null\n    },\n    authorId: 1\n  }, {\n    id: 2,\n    title: \"test boek\",\n    description: \"test boeken beschrijving\",\n    author: {\n      id: 2,\n      firstName: \"Kees\",\n      lastName: \"Test\",\n      bio: \"Kees Test is bijzonder\",\n      books: null\n    },\n    authorId: 2\n  }];\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule]\n    });\n    httpClient = TestBed.inject(HttpClient);\n    httpTestingController = TestBed.inject(HttpTestingController);\n    service = TestBed.inject(BookularService);\n  });\n  afterEach(() => {\n    httpTestingController.verify();\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('can test HttpClient.get', () => {\n    const testUrl = '/data';\n    httpClient.get(testUrl).subscribe(data => expect(data).toEqual(expectedBooks));\n    const req = httpTestingController.expectOne('/data');\n    expect(req.request.method).toEqual('GET');\n    req.flush(expectedBooks);\n    httpTestingController.verify();\n  });\n  it('can test HttpClient.post', () => {\n    const testUrl = 'https://localhost:7195/api/book/add';\n    /*   httpClient.post(testUrl, expectedBooks[0]).subscribe(data => {\r\n         expect(data).toEqual(expectedBooks)\r\n       })*/\n    /*    httpClient.post<IBook[]>(expectedBooks[0])\r\n          .subscribe(data =>\r\n            expect(data).toEqual(expectedBooks)\r\n          );*/\n    service.addBook(expectedBooks[0]).subscribe(data => {\n      expect(data).toEqual(expectedBooks);\n    });\n    const req = httpTestingController.expectOne('https://localhost:7195/api/book/add');\n    expect(req.request.method).toEqual('POST');\n    req.flush(expectedBooks);\n    httpTestingController.verify();\n  });\n  /*\r\n  \n   */ /*  it('should use ValueService', () => {\r\n      service = TestBed.inject(new BookularService(new HttpClient));\r\n      expect(service.getBooks(\"test\")).toBe();\r\n      });*/ /*\r\n              \r\n              it('should return expected heroes (HttpClient called once)', (done: DoneFn) => {\r\n              const expectedHeroes: IBook[] =\r\n               [{\r\n                 id: 1,\r\n                 title: \"test boek\",\r\n                 description: \"test boeken beschrijving\",\r\n                 author: {\r\n                   id: 1,\r\n                   firstName: \"Kees\",\r\n                   lastName: \"Test\",\r\n                   bio: \"\",\r\n                   books: null\r\n                 },\r\n                 authorId: 1\r\n               },\r\n               {\r\n                 id: 2,\r\n                 title: \"test boek\",\r\n                 description: \"test boeken beschrijving\",\r\n                 author: {\r\n                   id: 2,\r\n                   firstName: \"Kees\",\r\n                   lastName: \"Test\",\r\n                   bio: \"\",\r\n                   books: null\r\n                 },\r\n                 authorId: 2\r\n               },\r\n               ];\r\n              \r\n              httpClientSpy.get.and.returnValue(asyncData(expectedHeroes));\r\n              \r\n              service.books$.subscribe({\r\n               next: heroes => {\r\n                 expect(heroes)\r\n                   .withContext('expected heroes')\r\n                   .toEqual(expectedHeroes);\r\n                 done();\r\n               },\r\n               error: done.fail\r\n              });\r\n              \r\n              expect(httpClientSpy.get.calls.count())\r\n               .withContext('one call')\r\n               .toBe(1);*/\n  /* });*/\n});\n/*function asyncData(expectedHeroes: IBook[]): import(\"rxjs\").Observable<unknown> {\r\n  throw new Error('Function not implemented.');\r\n}*/","map":{"version":3,"mappings":"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","names":["TestBed","BookularService","HttpClient","HttpClientTestingModule","HttpTestingController","describe","service","httpClient","httpTestingController","expectedBooks","id","title","description","author","firstName","lastName","bio","books","authorId","beforeEach","configureTestingModule","imports","inject","afterEach","verify","it","expect","toBeTruthy","testUrl","get","subscribe","data","toEqual","req","expectOne","request","method","flush","addBook"],"sourceRoot":"","sources":["C:\\work\\traineeship\\Bookular\\Bookular\\ClientApp\\src\\services\\bookular.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\r\n\r\nimport { BookularService } from './bookular.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { IBook } from '../app/home/IBook';\r\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\nimport * as exp from 'constants';\r\n\r\n/*describe('BookularService', () => {\r\n  let service: BookularService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n    service = TestBed.inject(BookularService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n});*/\r\n\r\ndescribe('BookularService', () => {\r\n  let service: BookularService;\r\n\r\n  let httpClient: HttpClient;\r\n  let httpTestingController: HttpTestingController;\r\n\r\n  const expectedBooks: IBook[] =\r\n    [{\r\n      id: 1,\r\n      title: \"test boek\",\r\n      description: \"test boeken beschrijving\",\r\n      author: {\r\n        id: 1,\r\n        firstName: \"Kees\",\r\n        lastName: \"Test\",\r\n        bio: \"Kees Test is bijzonder\",\r\n        books: null\r\n      },\r\n      authorId: 1\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"test boek\",\r\n      description: \"test boeken beschrijving\",\r\n      author: {\r\n        id: 2,\r\n        firstName: \"Kees\",\r\n        lastName: \"Test\",\r\n        bio: \"Kees Test is bijzonder\",\r\n        books: null\r\n      },\r\n      authorId: 2\r\n    }];\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [HttpClientTestingModule]\r\n    });\r\n\r\n    httpClient = TestBed.inject(HttpClient);\r\n    httpTestingController = TestBed.inject(HttpTestingController);\r\n\r\n    service = TestBed.inject(BookularService);\r\n  });\r\n\r\n  afterEach(() => {\r\n    httpTestingController.verify();\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n\r\n  it('can test HttpClient.get', () => {\r\n    const testUrl = '/data';\r\n\r\n    httpClient.get<IBook[]>(testUrl)\r\n      .subscribe(data =>\r\n        expect(data).toEqual(expectedBooks)\r\n      );\r\n\r\n    const req = httpTestingController.expectOne('/data');\r\n\r\n    expect(req.request.method).toEqual('GET');\r\n\r\n    req.flush(expectedBooks);\r\n\r\n    httpTestingController.verify();\r\n  });\r\n\r\n  it('can test HttpClient.post', () => {\r\n    const testUrl = 'https://localhost:7195/api/book/add';\r\n\r\n    /*   httpClient.post(testUrl, expectedBooks[0]).subscribe(data => {\r\n         expect(data).toEqual(expectedBooks)\r\n       })*/\r\n\r\n\r\n\r\n    /*    httpClient.post<IBook[]>(expectedBooks[0])\r\n          .subscribe(data =>\r\n            expect(data).toEqual(expectedBooks)\r\n          );*/\r\n\r\n    service.addBook(expectedBooks[0]).subscribe(data => {\r\n      expect(data).toEqual(expectedBooks)\r\n    })\r\n\r\n    const req = httpTestingController.expectOne('https://localhost:7195/api/book/add');\r\n\r\n    expect(req.request.method).toEqual('POST');\r\n\r\n    req.flush(expectedBooks);\r\n\r\n    httpTestingController.verify();\r\n  });\r\n\r\n\r\n\r\n  /*\r\n \r\n   *//*  it('should use ValueService', () => {\r\nservice = TestBed.inject(new BookularService(new HttpClient));\r\nexpect(service.getBooks(\"test\")).toBe();\r\n});*//*\r\n     \r\n     it('should return expected heroes (HttpClient called once)', (done: DoneFn) => {\r\n     const expectedHeroes: IBook[] =\r\n      [{\r\n        id: 1,\r\n        title: \"test boek\",\r\n        description: \"test boeken beschrijving\",\r\n        author: {\r\n          id: 1,\r\n          firstName: \"Kees\",\r\n          lastName: \"Test\",\r\n          bio: \"\",\r\n          books: null\r\n        },\r\n        authorId: 1\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"test boek\",\r\n        description: \"test boeken beschrijving\",\r\n        author: {\r\n          id: 2,\r\n          firstName: \"Kees\",\r\n          lastName: \"Test\",\r\n          bio: \"\",\r\n          books: null\r\n        },\r\n        authorId: 2\r\n      },\r\n      ];\r\n     \r\n     httpClientSpy.get.and.returnValue(asyncData(expectedHeroes));\r\n     \r\n     service.books$.subscribe({\r\n      next: heroes => {\r\n        expect(heroes)\r\n          .withContext('expected heroes')\r\n          .toEqual(expectedHeroes);\r\n        done();\r\n      },\r\n      error: done.fail\r\n     });\r\n     \r\n     expect(httpClientSpy.get.calls.count())\r\n      .withContext('one call')\r\n      .toBe(1);*/\r\n  /* });*/\r\n});\r\n\r\n/*function asyncData(expectedHeroes: IBook[]): import(\"rxjs\").Observable<unknown> {\r\n  throw new Error('Function not implemented.');\r\n}*/\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}