{"ast":null,"code":"import { BookularService } from './bookular.service';\ndescribe('BookularService', () => {\n  let service;\n  let httpClientSpy;\n  beforeEach(() => {\n    /*TestBed.configureTestingModule({});\r\n    service = TestBed.inject(BookularService);*/\n    httpClientSpy = jasmine.createSpyObj('HttpClient', ['get']);\n    service = new BookularService(httpClientSpy);\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  /*  it('should use ValueService', () => {\r\n      service = TestBed.inject(new BookularService(new HttpClient));\r\n      expect(service.getBooks(\"test\")).toBe();\r\n    });*/\n  it('should return expected heroes (HttpClient called once)', done => {\n    const expectedHeroes = [{\n      id: 1,\n      title: \"test boek\",\n      description: \"test boeken beschrijving\",\n      author: {\n        id: 1,\n        firstName: \"Kees\",\n        lastName: \"Test\",\n        bio: \"\",\n        books: null\n      },\n      authorId: 1\n    }, {\n      id: 2,\n      title: \"test boek\",\n      description: \"test boeken beschrijving\",\n      author: {\n        id: 2,\n        firstName: \"Kees\",\n        lastName: \"Test\",\n        bio: \"\",\n        books: null\n      },\n      authorId: 2\n    }];\n    httpClientSpy.get.and.returnValue(asyncData(expectedHeroes));\n    service.getBooks(\"test\");\n    service.books$.subscribe({\n      next: heroes => {\n        expect(heroes).withContext('expected heroes').toEqual(expectedHeroes);\n        done();\n      },\n      error: done.fail\n    });\n    expect(httpClientSpy.get.calls.count()).withContext('one call').toBe(1);\n  });\n});\nfunction asyncData(expectedHeroes) {\n  throw new Error('Function not implemented.');\n}","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAQ,oBAAoB;AAIpDC,QAAQ,CAAC,iBAAiB,EAAE,MAAK;EAC/B,IAAIC,OAAwB;EAC5B,IAAIC,aAAyC;EAE7CC,UAAU,CAAC,MAAK;IACd;;IAEAD,aAAa,GAAGE,OAAO,CAACC,YAAY,CAAC,YAAY,EAAE,CAAC,KAAK,CAAC,CAAC;IAC3DJ,OAAO,GAAG,IAAIF,eAAe,CAACG,aAAa,CAAC;EAC9C,CAAC,CAAC;EAEFI,EAAE,CAAC,mBAAmB,EAAE,MAAK;IAC3BC,MAAM,CAACN,OAAO,CAAC,CAACO,UAAU,EAAE;EAC9B,CAAC,CAAC;EAEF;;;;EAKAF,EAAE,CAAC,wDAAwD,EAAGG,IAAY,IAAI;IAC5E,MAAMC,cAAc,GAClB,CAAC;MACCC,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,WAAW;MAClBC,WAAW,EAAE,0BAA0B;MACvCC,MAAM,EAAE;QACNH,EAAE,EAAE,CAAC;QACLI,SAAS,EAAE,MAAM;QACjBC,QAAQ,EAAE,MAAM;QAChBC,GAAG,EAAE,EAAE;QACPC,KAAK,EAAE;OACR;MACDC,QAAQ,EAAE;KACX,EACD;MACER,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,WAAW;MAClBC,WAAW,EAAE,0BAA0B;MACvCC,MAAM,EAAE;QACNH,EAAE,EAAE,CAAC;QACLI,SAAS,EAAE,MAAM;QACjBC,QAAQ,EAAE,MAAM;QAChBC,GAAG,EAAE,EAAE;QACPC,KAAK,EAAE;OACR;MACDC,QAAQ,EAAE;KACX,CACA;IAEHjB,aAAa,CAACkB,GAAG,CAACC,GAAG,CAACC,WAAW,CAACC,SAAS,CAACb,cAAc,CAAC,CAAC;IAE5DT,OAAO,CAACuB,QAAQ,CAAC,MAAM,CAAC;IAExBvB,OAAO,CAACwB,MAAM,CAAEC,SAAS,CAAC;MACxBC,IAAI,EAAEC,MAAM,IAAG;QACbrB,MAAM,CAACqB,MAAM,CAAC,CACXC,WAAW,CAAC,iBAAiB,CAAC,CAC9BC,OAAO,CAACpB,cAAc,CAAC;QAC1BD,IAAI,EAAE;MACR,CAAC;MACDsB,KAAK,EAAEtB,IAAI,CAACuB;KACb,CAAC;IAEFzB,MAAM,CAACL,aAAa,CAACkB,GAAG,CAACa,KAAK,CAACC,KAAK,EAAE,CAAC,CACpCL,WAAW,CAAC,UAAU,CAAC,CACvBM,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,SAASZ,SAAS,CAACb,cAAuB;EACxC,MAAM,IAAI0B,KAAK,CAAC,2BAA2B,CAAC;AAC9C","names":["BookularService","describe","service","httpClientSpy","beforeEach","jasmine","createSpyObj","it","expect","toBeTruthy","done","expectedHeroes","id","title","description","author","firstName","lastName","bio","books","authorId","get","and","returnValue","asyncData","getBooks","books$","subscribe","next","heroes","withContext","toEqual","error","fail","calls","count","toBe","Error"],"sourceRoot":"","sources":["C:\\work\\traineeship\\Bookular\\Bookular\\ClientApp\\src\\services\\bookular.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\r\n\r\nimport { BookularService } from './bookular.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { IBook } from '../app/home/IBook';\r\n\r\ndescribe('BookularService', () => {\r\n  let service: BookularService;\r\n  let httpClientSpy: jasmine.SpyObj<HttpClient>;\r\n\r\n  beforeEach(() => {\r\n    /*TestBed.configureTestingModule({});\r\n    service = TestBed.inject(BookularService);*/\r\n    httpClientSpy = jasmine.createSpyObj('HttpClient', ['get']);\r\n    service = new BookularService(httpClientSpy);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n\r\n  /*  it('should use ValueService', () => {\r\n      service = TestBed.inject(new BookularService(new HttpClient));\r\n      expect(service.getBooks(\"test\")).toBe();\r\n    });*/\r\n\r\n  it('should return expected heroes (HttpClient called once)', (done: DoneFn) => {\r\n    const expectedHeroes: IBook[] =\r\n      [{\r\n        id: 1,\r\n        title: \"test boek\",\r\n        description: \"test boeken beschrijving\",\r\n        author: {\r\n          id: 1,\r\n          firstName: \"Kees\",\r\n          lastName: \"Test\",\r\n          bio: \"\",\r\n          books: null\r\n        },\r\n        authorId: 1\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"test boek\",\r\n        description: \"test boeken beschrijving\",\r\n        author: {\r\n          id: 2,\r\n          firstName: \"Kees\",\r\n          lastName: \"Test\",\r\n          bio: \"\",\r\n          books: null\r\n        },\r\n        authorId: 2\r\n      },\r\n      ];\r\n\r\n    httpClientSpy.get.and.returnValue(asyncData(expectedHeroes));\r\n\r\n    service.getBooks(\"test\");\r\n\r\n    service.books$ .subscribe({\r\n      next: heroes => {\r\n        expect(heroes)\r\n          .withContext('expected heroes')\r\n          .toEqual(expectedHeroes);\r\n        done();\r\n      },\r\n      error: done.fail\r\n    });\r\n\r\n    expect(httpClientSpy.get.calls.count())\r\n      .withContext('one call')\r\n      .toBe(1);\r\n  });\r\n});\r\n\r\nfunction asyncData(expectedHeroes: IBook[]): import(\"rxjs\").Observable<unknown> {\r\n  throw new Error('Function not implemented.');\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}