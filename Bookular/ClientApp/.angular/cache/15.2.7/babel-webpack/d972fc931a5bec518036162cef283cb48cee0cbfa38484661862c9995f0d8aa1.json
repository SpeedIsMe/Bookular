{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { BookularService } from './bookular.service';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n/*describe('BookularService', () => {\r\n  let service: BookularService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n    service = TestBed.inject(BookularService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n});*/\ndescribe('BookularService', () => {\n  let service;\n  let httpClient;\n  let httpTestingController;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule]\n    });\n    httpClient = TestBed.inject(HttpClient);\n    httpTestingController = TestBed.inject(HttpTestingController);\n    service = TestBed.inject(BookularService);\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('can test HttpClient.get', () => {\n    const testUrl = 'test';\n    const expectedHeroes = [{\n      id: 1,\n      title: \"test boek\",\n      description: \"test boeken beschrijving\",\n      author: {\n        id: 1,\n        firstName: \"Kees\",\n        lastName: \"Test\",\n        bio: \"\",\n        books: null\n      },\n      authorId: 1\n    }, {\n      id: 2,\n      title: \"test boek\",\n      description: \"test boeken beschrijving\",\n      author: {\n        id: 2,\n        firstName: \"Kees\",\n        lastName: \"Test\",\n        bio: \"\",\n        books: null\n      },\n      authorId: 2\n    }];\n    // Make an HTTP GET request\n    httpClient.get(testUrl).subscribe(data =>\n    // When observable resolves, result should match test data\n    expect(data).toEqual(expectedHeroes));\n    // The following `expectOne()` will match the request's URL.\n    // If no requests or multiple requests matched that URL\n    // `expectOne()` would throw.\n    const req = httpTestingController.expectOne('/data');\n    // Assert that the request is a GET.\n    expect(req.request.method).toEqual('GET');\n    // Respond with mock data, causing Observable to resolve.\n    // Subscribe callback asserts that correct data was returned.\n    req.flush(expectedHeroes);\n    // Finally, assert that there are no outstanding requests.\n    httpTestingController.verify();\n  });\n  /* it('should be created', () => {\r\n     expect(service).toBeTruthy();\r\n   });\r\n  \n   */ /*  it('should use ValueService', () => {\r\n      service = TestBed.inject(new BookularService(new HttpClient));\r\n      expect(service.getBooks(\"test\")).toBe();\r\n      });*/ /*\r\n            it('should return expected heroes (HttpClient called once)', (done: DoneFn) => {\r\n            const expectedHeroes: IBook[] =\r\n            [{\r\n            id: 1,\r\n            title: \"test boek\",\r\n            description: \"test boeken beschrijving\",\r\n            author: {\r\n            id: 1,\r\n            firstName: \"Kees\",\r\n            lastName: \"Test\",\r\n            bio: \"\",\r\n            books: null\r\n            },\r\n            authorId: 1\r\n            },\r\n            {\r\n            id: 2,\r\n            title: \"test boek\",\r\n            description: \"test boeken beschrijving\",\r\n            author: {\r\n            id: 2,\r\n            firstName: \"Kees\",\r\n            lastName: \"Test\",\r\n            bio: \"\",\r\n            books: null\r\n            },\r\n            authorId: 2\r\n            },\r\n            ];\r\n            httpClientSpy.get.and.returnValue(asyncData(expectedHeroes));\r\n            service.books$.subscribe({\r\n            next: heroes => {\r\n            expect(heroes)\r\n            .withContext('expected heroes')\r\n            .toEqual(expectedHeroes);\r\n            done();\r\n            },\r\n            error: done.fail\r\n            });\r\n            expect(httpClientSpy.get.calls.count())\r\n            .withContext('one call')\r\n            .toBe(1);*/\n  /* });*/\n});\n/*function asyncData(expectedHeroes: IBook[]): import(\"rxjs\").Observable<unknown> {\r\n  throw new Error('Function not implemented.');\r\n}*/","map":{"version":3,"mappings":"AAAA,SAASA,OAAO,QAAQ,uBAAuB;AAE/C,SAASC,eAAe,QAAQ,oBAAoB;AACpD,SAASC,UAAU,QAAQ,sBAAsB;AAEjD,SAASC,uBAAuB,EAAEC,qBAAqB,QAAQ,8BAA8B;AAE7F;;;;;;;;;;;;AAaAC,QAAQ,CAAC,iBAAiB,EAAE,MAAK;EAC/B,IAAIC,OAAwB;EAE5B,IAAIC,UAAsB;EAC1B,IAAIC,qBAA4C;EAEhDC,UAAU,CAAC,MAAK;IACdT,OAAO,CAACU,sBAAsB,CAAC;MAC7BC,OAAO,EAAE,CAACR,uBAAuB;KAClC,CAAC;IAEFI,UAAU,GAAGP,OAAO,CAACY,MAAM,CAACV,UAAU,CAAC;IACvCM,qBAAqB,GAAGR,OAAO,CAACY,MAAM,CAACR,qBAAqB,CAAC;IAE7DE,OAAO,GAAGN,OAAO,CAACY,MAAM,CAACX,eAAe,CAAC;EAC3C,CAAC,CAAC;EAEFY,EAAE,CAAC,mBAAmB,EAAE,MAAK;IAC3BC,MAAM,CAACR,OAAO,CAAC,CAACS,UAAU,EAAE;EAC9B,CAAC,CAAC;EAEFF,EAAE,CAAC,yBAAyB,EAAE,MAAK;IACjC,MAAMG,OAAO,GAAG,MAAM;IAEtB,MAAMC,cAAc,GAClB,CAAC;MACCC,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,WAAW;MAClBC,WAAW,EAAE,0BAA0B;MACvCC,MAAM,EAAE;QACNH,EAAE,EAAE,CAAC;QACLI,SAAS,EAAE,MAAM;QACjBC,QAAQ,EAAE,MAAM;QAChBC,GAAG,EAAE,EAAE;QACPC,KAAK,EAAE;OACR;MACDC,QAAQ,EAAE;KACX,EACD;MACER,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,WAAW;MAClBC,WAAW,EAAE,0BAA0B;MACvCC,MAAM,EAAE;QACNH,EAAE,EAAE,CAAC;QACLI,SAAS,EAAE,MAAM;QACjBC,QAAQ,EAAE,MAAM;QAChBC,GAAG,EAAE,EAAE;QACPC,KAAK,EAAE;OACR;MACDC,QAAQ,EAAE;KACX,CACA;IAEH;IACAnB,UAAU,CAACoB,GAAG,CAAQX,OAAO,CAAC,CAC3BY,SAAS,CAACC,IAAI;IACb;IACAf,MAAM,CAACe,IAAI,CAAC,CAACC,OAAO,CAACb,cAAc,CAAC,CACrC;IAEH;IACA;IACA;IACA,MAAMc,GAAG,GAAGvB,qBAAqB,CAACwB,SAAS,CAAC,OAAO,CAAC;IAEpD;IACAlB,MAAM,CAACiB,GAAG,CAACE,OAAO,CAACC,MAAM,CAAC,CAACJ,OAAO,CAAC,KAAK,CAAC;IAEzC;IACA;IACAC,GAAG,CAACI,KAAK,CAAClB,cAAc,CAAC;IAEzB;IACAT,qBAAqB,CAAC4B,MAAM,EAAE;EAChC,CAAC,CAAC;EAIF;;;;KAAA,CAIG;;;WAAA,CAGE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+CL;AACF,CAAC,CAAC;AAEF","names":["TestBed","BookularService","HttpClient","HttpClientTestingModule","HttpTestingController","describe","service","httpClient","httpTestingController","beforeEach","configureTestingModule","imports","inject","it","expect","toBeTruthy","testUrl","expectedHeroes","id","title","description","author","firstName","lastName","bio","books","authorId","get","subscribe","data","toEqual","req","expectOne","request","method","flush","verify"],"sourceRoot":"","sources":["C:\\work\\traineeship\\Bookular\\Bookular\\ClientApp\\src\\services\\bookular.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\r\n\r\nimport { BookularService } from './bookular.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { IBook } from '../app/home/IBook';\r\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\n\r\n/*describe('BookularService', () => {\r\n  let service: BookularService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n    service = TestBed.inject(BookularService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n});*/\r\n\r\ndescribe('BookularService', () => {\r\n  let service: BookularService;\r\n\r\n  let httpClient: HttpClient;\r\n  let httpTestingController: HttpTestingController;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [HttpClientTestingModule]\r\n    });\r\n\r\n    httpClient = TestBed.inject(HttpClient);\r\n    httpTestingController = TestBed.inject(HttpTestingController);\r\n\r\n    service = TestBed.inject(BookularService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n\r\n  it('can test HttpClient.get', () => {\r\n    const testUrl = 'test';\r\n\r\n    const expectedHeroes: IBook[] =\r\n      [{\r\n        id: 1,\r\n        title: \"test boek\",\r\n        description: \"test boeken beschrijving\",\r\n        author: {\r\n          id: 1,\r\n          firstName: \"Kees\",\r\n          lastName: \"Test\",\r\n          bio: \"\",\r\n          books: null\r\n        },\r\n        authorId: 1\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"test boek\",\r\n        description: \"test boeken beschrijving\",\r\n        author: {\r\n          id: 2,\r\n          firstName: \"Kees\",\r\n          lastName: \"Test\",\r\n          bio: \"\",\r\n          books: null\r\n        },\r\n        authorId: 2\r\n      },\r\n      ];\r\n\r\n    // Make an HTTP GET request\r\n    httpClient.get<IBook>(testUrl)\r\n      .subscribe(data =>\r\n        // When observable resolves, result should match test data\r\n        expect(data).toEqual(expectedHeroes)\r\n      );\r\n\r\n    // The following `expectOne()` will match the request's URL.\r\n    // If no requests or multiple requests matched that URL\r\n    // `expectOne()` would throw.\r\n    const req = httpTestingController.expectOne('/data');\r\n\r\n    // Assert that the request is a GET.\r\n    expect(req.request.method).toEqual('GET');\r\n\r\n    // Respond with mock data, causing Observable to resolve.\r\n    // Subscribe callback asserts that correct data was returned.\r\n    req.flush(expectedHeroes);\r\n\r\n    // Finally, assert that there are no outstanding requests.\r\n    httpTestingController.verify();\r\n  });\r\n\r\n\r\n\r\n  /* it('should be created', () => {\r\n     expect(service).toBeTruthy();\r\n   });\r\n \r\n   *//*  it('should use ValueService', () => {\r\n    service = TestBed.inject(new BookularService(new HttpClient));\r\n    expect(service.getBooks(\"test\")).toBe();\r\n  });*//*\r\n\r\nit('should return expected heroes (HttpClient called once)', (done: DoneFn) => {\r\nconst expectedHeroes: IBook[] =\r\n [{\r\n   id: 1,\r\n   title: \"test boek\",\r\n   description: \"test boeken beschrijving\",\r\n   author: {\r\n     id: 1,\r\n     firstName: \"Kees\",\r\n     lastName: \"Test\",\r\n     bio: \"\",\r\n     books: null\r\n   },\r\n   authorId: 1\r\n },\r\n {\r\n   id: 2,\r\n   title: \"test boek\",\r\n   description: \"test boeken beschrijving\",\r\n   author: {\r\n     id: 2,\r\n     firstName: \"Kees\",\r\n     lastName: \"Test\",\r\n     bio: \"\",\r\n     books: null\r\n   },\r\n   authorId: 2\r\n },\r\n ];\r\n\r\nhttpClientSpy.get.and.returnValue(asyncData(expectedHeroes));\r\n\r\nservice.books$.subscribe({\r\n next: heroes => {\r\n   expect(heroes)\r\n     .withContext('expected heroes')\r\n     .toEqual(expectedHeroes);\r\n   done();\r\n },\r\n error: done.fail\r\n});\r\n\r\nexpect(httpClientSpy.get.calls.count())\r\n .withContext('one call')\r\n .toBe(1);*/\r\n  /* });*/\r\n});\r\n\r\n/*function asyncData(expectedHeroes: IBook[]): import(\"rxjs\").Observable<unknown> {\r\n  throw new Error('Function not implemented.');\r\n}*/\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}